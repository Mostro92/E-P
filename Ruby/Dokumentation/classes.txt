OOP

Klassen
	Klassen bilden den Plan von konkreten Objekten.

Def:
	class Player

	end
	Eine Klasse wird durch die Verwendung des Schlüsselwortes class definiert.
	Die Definition ist immer in einen Block eingeschlossen


Objekt:
	Wenn ich mit einer Klasse arbeiten will, dann erzeuge ich ein Objekt,dass in einer Variablen gespeichert wird.
		obj = Player.new
	Ein neues Objekt wird in einer Variablen mit beliebiger Bezeichnung gespeichert.
	Es wird mit dem Namen der Klassse und dem Aufruf der Methode new erzeugt.
	Das Objekt hat alle Eigenschaften (Attribute) und Fähigkeiten (Methode), die in der Klasse definiert sind.

Konstruktor:
	Beim Erzeugen eines neuen Objektes mit Player.new wird automatisch eine Methode'initialize' aufrufen. Dieses Methode gibt es in jeder Ruby-Klasse. Es ist üblich diese exestierende Methode mit einer eigenen Methode zu überschreiben,um dort die Basiswerte des Objektes eingetragen werden.	


Instanzvariable / Eigenschaft:

	In der OOP hat ein Objekt bestimmte Eigenschaften, die es Charakterrisieren.
	In Ruby werden diese Eigenschaften als Instanzvariablen definiert und ein '@' wird dem namen voranzustellen	
	Beispiel:@name
	Das besondere einer Instanzvariable oder Eigenschaft ist,dasss sie in der ganzen Klase gilt und verwertet werden kann.
	Wichitg: Variablen die innnerhalb von einem Block definiert werden und kein @ vorangestellt haben, sind sogennante lokale variablen und gelten nur innerhlab des Blockes indem sie definiert sind.

	Eine Instanzvariable eine Eigenschaft, indem es in der Klasse Methoden gibt, die den Zugriff von außerhalb (Aufruf durch das Objekt) ermöglichen.
	Eine eigenschaft hat einen sogenannten Setter, der es ermöglicht einen Wert zu setzen; und einen Getter, der einen Wert zurückgibt.

	Getter:
		def name
			@name
		ende
		Die Methode heisst genauso wie die Instanzvariablen, ohne das @. Sie hat die Aufgabe, den Wert der Instanzvariable name zurückzugeben.
		Aufrauf:
			puts obj.name
			gibt den namen des Players aus
		Kurzform:
			Anstelle einer Methodendefinition kann ihc eine Kurzform verwenden:
				attr_reader :name

	Setter:
		def name=(name)
			@name
		end
		Der Setter zum Speichern eines Wertes in einer Instanzvariable heißt wie die Instanzvariable mit einem = im Namen.
		Aufruf:
			obj.name = "Supergirl"

		Kurzform:
			attr_writer :name

	Kurzform für Settor und Getter:
		attr_accessor :name	

	Virtuelles Attribut:
		Ein virtuelles Attribut ist eine Methode,die so aussieht,bzw. genutzt werden kann wie eine Eigenschaft, die allerdings keine Instanzvariable hat; also keine echte Eigenschaft ist, obwohl sie von außen so aussieht.

	def normalized_health
		@health * 1000
	end	